from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

bot = Bot(token="TOKEN")          # token –±–æ—Ç–∞

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

admin_id = 123    # id –∞–¥–º–∏–Ω–∞

class UserState(StatesGroup):
    id_tg = State()
    nick = State()
    opit_worka = State()
    traffik = State()
    info = State()

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üñä")
    button2 = types.KeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë§')
    keyboard.add(button, button2)
    await message.answer('–ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω @BlazarPython. –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º - —Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–Ω–æ–ø–æ–∫.', reply_markup=keyboard)

@dp.message_handler(content_types=['text'])
async def message(message):
    global id_tg
    id_tg = message.from_user.id
    all_id = open("all_id.txt", "r", encoding="utf-8")
    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üñä':
        if str(id_tg) not in all_id.read():
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è?\n–ù–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ / —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å lolza...", reply_markup=types.ReplyKeyboardRemove())
            all_id = open("all_id.txt", "a", encoding="utf-8")
            all_id.write(str(f"{id_tg}\n"))
            all_id.close()
            await UserState.nick.set()
        else:
            await message.answer('–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –≤–µ—Ä–¥–∏–∫—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞')
    elif message.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë§':
        await message.answer("–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @BlazarPython")

@dp.message_handler(state=UserState.nick)
async def get_nick(message: types.Message, state: FSMContext):
    await state.update_data(nick=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.")
    await UserState.opit_worka.set()

@dp.message_handler(state=UserState.opit_worka)
async def get_nick(message: types.Message, state: FSMContext):
    await state.update_data(opit_worka=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞.")
    await UserState.traffik.set()

@dp.message_handler(state=UserState.traffik)
async def get_nick(message: types.Message, state: FSMContext):
    await state.update_data(traffik=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∂–µ–ª–∞–Ω–∏—é.")
    await UserState.info.set()

@dp.message_handler(state=UserState.info)
async def get_info(message: types.Message, state: FSMContext):
    if message.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë§':
        await message.answer("–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @BlazarPython")
    elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üñä':
        await message.answer('–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –≤–µ—Ä–¥–∏–∫—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞')
    else:
        global nick_name
        await state.update_data(info=message.text)
        await state.update_data(id_tg=message.from_user.id)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üñä")
        button2 = types.KeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë§')
        keyboard.add(button, button2)
        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–Ω–µ—Å–µ–Ω–∏—è –≤–µ—Ä–¥–∏–∫—Ç–∞ üï£", reply_markup=keyboard)
        data = await state.get_data()
        nick_name = data['nick']
        inlinekeyboard = types.InlineKeyboardMarkup()
        inlinekeyboard.add(types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å ‚òë", callback_data="accept"), types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data="deny"))
        await bot.send_message(admin_id, f"‚ùó –ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {data['nick']}. "
                                         f"\n\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {data['opit_worka']}"
                                         f"\n–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞: {data['traffik']}"
                                         f"\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {data['info']}", reply_markup=inlinekeyboard)
        await state.finish()

@dp.callback_query_handler(text="accept")
async def callback_inline(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º: {nick_name}')
    await call.bot.send_message(id_tg, '–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!')
    await call.answer()

@dp.callback_query_handler(text="deny")
async def send_all(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')
    await call.bot.send_message(id_tg, '–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!')
    await call.answer()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)